{"version":3,"sources":["../src/utils.js"],"names":["uint32_to_buf","buf_to_uint32","uint8_to_buf","hex_to_buf","buf_to_hex","path_to_buf","chunkBy","stripRetcodeFromResponse","buf_to_amount","amount_to_buf","base58_encode","base58_decode","BASE58_ALPHABET","bs58","bs10","MAX_LOVELACE_SUPPLY_STR","join","Precondition","check","cond","checkIsString","data","checkIsInteger","Number","isInteger","checkIsArray","Array","isArray","checkIsBuffer","Buffer","isBuffer","checkIsUint32","checkIsUint8","checkIsHexString","length","test","checkIsValidPath","path","x","checkIsValidAmount","amount","checkIsValidBase58","c","includes","Assert","assert","value","alloc","writeUInt32BE","readUIntBE","writeUInt8","from","toString","i","sum","arr","reduce","y","chunkLengths","len","offset","result","restLength","push","slice","response","L","retcode","encoded","encode","replace","decode","padding","concat"],"mappings":"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","file":"utils.js","sourcesContent":["//@flow\nimport basex from \"base-x\";\n\nconst BASE58_ALPHABET =\n  \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nconst bs58 = basex(BASE58_ALPHABET);\n\n// We use bs10 as an easy way to parse/encode amount strings\nconst bs10 = basex(\"0123456789\");\n\n// Max supply in lovelace\nconst MAX_LOVELACE_SUPPLY_STR = [\"45\", \"000\", \"000\", \"000\", \"000000\"].join(\"\");\n\nexport const Precondition = {\n  // Generic check\n  check: (cond: boolean) => {\n    if (!cond) throw \"Precondition failed\";\n  },\n  // Basic types\n  checkIsString: (data: any) => {\n    Precondition.check(typeof data === \"string\");\n  },\n  checkIsInteger: (data: any) => {\n    Precondition.check(Number.isInteger(data));\n  },\n  checkIsArray: (data: any) => {\n    Precondition.check(Array.isArray(data));\n  },\n  checkIsBuffer: (data: any) => {\n    Precondition.check(Buffer.isBuffer(data));\n  },\n\n  // Extended checks\n  checkIsUint32: (data: any) => {\n    Precondition.checkIsInteger(data);\n    Precondition.check(data >= 0);\n    Precondition.check(data <= 4294967295);\n  },\n  checkIsUint8: (data: any) => {\n    Precondition.checkIsInteger(data);\n    Precondition.check(data >= 0);\n    Precondition.check(data <= 255);\n  },\n\n  checkIsHexString: (data: any) => {\n    Precondition.checkIsString(data);\n    Precondition.check(data.length % 2 == 0);\n    Precondition.check(/^[0-9a-fA-F]*$/.test(data));\n  },\n  checkIsValidPath: (path: Array<number>) => {\n    Precondition.checkIsArray(path);\n    for (const x of path) {\n      Precondition.checkIsUint32(x);\n    }\n  },\n  checkIsValidAmount: (amount: string) => {\n    Precondition.checkIsString(amount);\n    Precondition.check(/^[0-9]*$/.test(amount));\n    // Length checks\n    Precondition.check(amount.length > 0);\n    Precondition.check(amount.length <= MAX_LOVELACE_SUPPLY_STR.length);\n    // Leading zeros\n    if (amount.length > 1) {\n      Precondition.check(amount[0] != \"0\");\n    }\n    // less than max supply\n    if (amount.length == MAX_LOVELACE_SUPPLY_STR.length) {\n      // Note: this is string comparison!\n      Precondition.check(amount <= MAX_LOVELACE_SUPPLY_STR);\n    }\n  },\n  checkIsValidBase58: (data: string) => {\n    Precondition.checkIsString(data);\n    for (const c of data) {\n      Precondition.check(BASE58_ALPHABET.includes(c));\n    }\n  }\n};\n\nexport const Assert = {\n  assert: (cond: boolean) => {\n    if (!cond) throw \"Assertion failed\";\n  }\n};\n\nexport function uint32_to_buf(value: number): Buffer {\n  Precondition.checkIsUint32(value);\n\n  const data = Buffer.alloc(4);\n  data.writeUInt32BE(value, 0);\n  return data;\n}\n\nexport function buf_to_uint32(data: Buffer): number {\n  Precondition.check(data.length == 4);\n\n  return data.readUIntBE(0, 4);\n}\n\nexport function uint8_to_buf(value: number): Buffer {\n  Precondition.checkIsUint8(value);\n\n  const data = Buffer.alloc(1);\n  data.writeUInt8(value, 0);\n  return data;\n}\n\nexport function hex_to_buf(data: string): Buffer {\n  Precondition.checkIsHexString(data);\n  return Buffer.from(data, \"hex\");\n}\n\nexport function buf_to_hex(data: Buffer): string {\n  return data.toString(\"hex\");\n}\n\n// no buf_to_uint8\n\nexport function path_to_buf(path: Array<number>): Buffer {\n  Precondition.checkIsValidPath(path);\n\n  const data = Buffer.alloc(1 + 4 * path.length);\n  data.writeUInt8(path.length, 0);\n\n  for (let i = 0; i < path.length; i++) {\n    data.writeUInt32BE(path[i], 1 + i * 4);\n  }\n  return data;\n}\n\nconst sum = (arr: Array<number>) => arr.reduce((x, y) => x + y, 0);\n\nexport function chunkBy(data: Buffer, chunkLengths: Array<number>) {\n  Precondition.checkIsBuffer(data);\n  Precondition.checkIsArray(chunkLengths);\n  for (const len of chunkLengths) {\n    Precondition.checkIsInteger(len);\n    Precondition.check(len > 0);\n  }\n  Precondition.check(data.length <= sum(chunkLengths));\n\n  let offset = 0;\n  const result = [];\n\n  const restLength = data.length - sum(chunkLengths);\n\n  for (let c of [...chunkLengths, restLength]) {\n    result.push(data.slice(offset, offset + c));\n\n    offset += c;\n  }\n\n  return result;\n}\n\nexport function stripRetcodeFromResponse(response: Buffer): Buffer {\n  Precondition.checkIsBuffer(response);\n  Precondition.check(response.length >= 2);\n\n  const L = response.length - 2;\n  const retcode = response.slice(L, L + 2);\n\n  if (retcode.toString(\"hex\") != \"9000\")\n    throw `Invalid retcode ${retcode.toString(\"hex\")}`;\n  return response.slice(0, L);\n}\n\nexport function buf_to_amount(data: Buffer): string {\n  Precondition.checkIsBuffer(data);\n  Precondition.check(data.length == 8);\n\n  const encoded = bs10.encode(data);\n  // Strip leading zeros\n  return encoded.replace(/^0*./, \"\");\n}\n\nexport function amount_to_buf(amount: string): Buffer {\n  Precondition.checkIsValidAmount(amount);\n\n  const data = bs10.decode(amount);\n  // Amount should fit uin64_t\n  Assert.assert(data.length <= 8);\n\n  const padding = Buffer.alloc(8 - data.length);\n  return Buffer.concat([padding, data]);\n}\n\nexport function base58_encode(data: Buffer): string {\n  Precondition.checkIsBuffer(data);\n\n  return bs58.encode(data);\n}\n\nexport function base58_decode(data: string): Buffer {\n  Precondition.checkIsValidBase58(data);\n\n  return bs58.decode(data);\n}\n\nexport default {\n  hex_to_buf,\n  buf_to_hex,\n\n  uint32_to_buf,\n  buf_to_uint32,\n\n  // no pair for now\n  uint8_to_buf,\n\n  // no pair for now\n  path_to_buf,\n\n  amount_to_buf,\n  buf_to_amount,\n\n  base58_encode,\n  base58_decode,\n\n  chunkBy,\n  stripRetcodeFromResponse\n};\n"]}